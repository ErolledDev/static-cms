[
  {
    "id": "content-1735659600000-abc123def",
    "title": "10 Essential Web Development Tools Every Developer Should Know",
    "slug": "essential-web-development-tools-2025",
    "content": "# 10 Essential Web Development Tools Every Developer Should Know\n\nAs we enter 2025, the web development landscape continues to evolve at a rapid pace. Whether you're a seasoned developer or just starting your coding journey, having the right tools in your arsenal can make the difference between struggling with mundane tasks and focusing on what truly matters: building amazing web experiences.\n\n## 1. Visual Studio Code\n\nVS Code has become the go-to editor for millions of developers worldwide. Its extensive plugin ecosystem, built-in Git integration, and intelligent IntelliSense make it an indispensable tool.\n\n**Key Features:**\n- Lightning-fast performance\n- Extensive marketplace with thousands of extensions\n- Built-in terminal and debugging capabilities\n- Live Share for real-time collaboration\n\n## 2. Chrome DevTools\n\nEvery web developer's best friend for debugging, performance optimization, and understanding how websites work under the hood.\n\n**Pro Tips:**\n- Use the Performance tab to identify bottlenecks\n- Leverage the Network tab to optimize loading times\n- Experiment with CSS changes in real-time\n\n## 3. Git and GitHub\n\nVersion control is non-negotiable in modern development. Git tracks your code changes, while GitHub provides a platform for collaboration and code hosting.\n\n```bash\n# Essential Git commands\ngit init\ngit add .\ngit commit -m \"Your commit message\"\ngit push origin main\n```\n\n## 4. Node.js and npm\n\nNode.js brings JavaScript to the server-side, while npm manages your project dependencies with ease.\n\n## 5. Webpack or Vite\n\nModule bundlers that transform your development code into optimized production assets. Vite has gained popularity for its lightning-fast development server.\n\n## 6. Sass/SCSS\n\nCSS preprocessors that add programming features to CSS, making stylesheets more maintainable and powerful.\n\n## 7. Postman\n\nAPI development and testing made simple. Essential for working with REST APIs and GraphQL endpoints.\n\n## 8. Figma\n\nCollaborative design tool that bridges the gap between designers and developers.\n\n## 9. Docker\n\nContainerization platform that ensures your applications run consistently across different environments.\n\n## 10. Lighthouse\n\nGoogle's tool for auditing web performance, accessibility, and SEO.\n\n## Conclusion\n\nThese tools form the foundation of modern web development. Start with the basics like VS Code and Chrome DevTools, then gradually incorporate others as your projects grow in complexity.\n\n> \"The right tools don't make you a better developer, but they certainly make better development possible.\"",
    "featuredImageUrl": "https://images.pexels.com/photos/574071/pexels-photo-574071.jpeg",
    "metaDescription": "Discover the 10 essential web development tools that every developer should master in 2025. From VS Code to Docker, boost your productivity today.",
    "seoTitle": "10 Essential Web Development Tools for 2025 | Developer Guide",
    "keywords": ["web development", "developer tools", "VS Code", "Chrome DevTools", "Git", "productivity"],
    "author": "Alex Chen",
    "categories": ["Web Development", "Tools"],
    "tags": ["tools", "productivity", "development", "coding", "software"],
    "status": "published",
    "publishDate": "2025-01-01T10:00:00Z",
    "createdAt": "2025-01-01T09:30:00Z",
    "updatedAt": "2025-01-01T10:15:00Z"
  },
  {
    "id": "content-1735663200000-def456ghi",
    "title": "The Complete Guide to React Hooks in 2025",
    "slug": "complete-guide-react-hooks-2025",
    "content": "# The Complete Guide to React Hooks in 2025\n\nReact Hooks revolutionized how we write React components, making functional components as powerful as class components while keeping code cleaner and more reusable.\n\n## What Are React Hooks?\n\nHooks are functions that let you \"hook into\" React state and lifecycle features from functional components. They were introduced in React 16.8 and have since become the standard way to write React applications.\n\n## Essential Built-in Hooks\n\n### useState\n\nThe most fundamental hook for managing component state.\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\n### useEffect\n\nHandles side effects in functional components, replacing lifecycle methods.\n\n```jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction UserProfile({ userId }) {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    fetchUser(userId).then(setUser);\n  }, [userId]); // Dependency array\n\n  return user ? <div>{user.name}</div> : <div>Loading...</div>;\n}\n```\n\n### useContext\n\nConsumes context values without nesting.\n\n```jsx\nconst ThemeContext = React.createContext();\n\nfunction ThemedButton() {\n  const theme = useContext(ThemeContext);\n  return (\n    <button style={{ background: theme.background }}>\n      I am styled by theme context!\n    </button>\n  );\n}\n```\n\n## Advanced Hooks\n\n### useReducer\n\nFor complex state logic, useReducer is often preferable to useState.\n\n```jsx\nconst initialState = { count: 0 };\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <>\n      Count: {state.count}\n      <button onClick={() => dispatch({ type: 'increment' })}>\n        +\n      </button>\n    </>\n  );\n}\n```\n\n### useMemo and useCallback\n\nOptimization hooks to prevent unnecessary re-renders and recalculations.\n\n```jsx\nfunction ExpensiveComponent({ items, filter }) {\n  const filteredItems = useMemo(() => {\n    return items.filter(item => item.category === filter);\n  }, [items, filter]);\n\n  const handleClick = useCallback((id) => {\n    // Handle click logic\n  }, []);\n\n  return (\n    <div>\n      {filteredItems.map(item => (\n        <Item key={item.id} onClick={handleClick} />\n      ))}\n    </div>\n  );\n}\n```\n\n## Custom Hooks\n\nCreate reusable stateful logic by building your own hooks.\n\n```jsx\nfunction useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  const setValue = (value) => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n```\n\n## Best Practices\n\n1. **Always call hooks at the top level** - Never inside loops, conditions, or nested functions\n2. **Use the dependency array correctly** - Include all values from component scope that are used inside useEffect\n3. **Optimize with useMemo and useCallback** - But don't overuse them\n4. **Create custom hooks for reusable logic** - Extract complex stateful logic into custom hooks\n\n## Conclusion\n\nReact Hooks have fundamentally changed how we write React applications. They promote code reuse, make components easier to understand, and eliminate many of the pitfalls of class components. Master these patterns, and you'll write cleaner, more maintainable React code.",
    "featuredImageUrl": "https://images.pexels.com/photos/11035380/pexels-photo-11035380.jpeg",
    "metaDescription": "Master React Hooks with this comprehensive 2025 guide. Learn useState, useEffect, custom hooks, and best practices with practical examples.",
    "seoTitle": "Complete React Hooks Guide 2025 | useState, useEffect & More",
    "keywords": ["React", "React Hooks", "useState", "useEffect", "JavaScript", "frontend"],
    "author": "Sarah Johnson",
    "categories": ["React", "Frontend Development"],
    "tags": ["react", "hooks", "javascript", "frontend", "tutorial"],
    "status": "published",
    "publishDate": "2025-01-02T14:00:00Z",
    "createdAt": "2025-01-02T13:30:00Z",
    "updatedAt": "2025-01-02T14:15:00Z"
  },
  {
    "id": "content-1735666800000-ghi789jkl",
    "title": "CSS Grid vs Flexbox: When to Use Each Layout Method",
    "slug": "css-grid-vs-flexbox-layout-guide",
    "content": "# CSS Grid vs Flexbox: When to Use Each Layout Method\n\nTwo of the most powerful layout systems in modern CSS are Flexbox and CSS Grid. While both are incredibly useful, they serve different purposes and excel in different scenarios. Understanding when to use each will make you a more effective frontend developer.\n\n## Understanding the Fundamentals\n\n### Flexbox: One-Dimensional Layout\n\nFlexbox is designed for **one-dimensional layouts** - either a row or a column. It excels at distributing space and aligning items within a single axis.\n\n```css\n.flex-container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 1rem;\n}\n```\n\n### CSS Grid: Two-Dimensional Layout\n\nCSS Grid is designed for **two-dimensional layouts** - both rows and columns simultaneously. It's perfect for complex layouts where you need precise control over both dimensions.\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr;\n  grid-template-rows: auto 1fr auto;\n  gap: 1rem;\n  height: 100vh;\n}\n```\n\n## When to Use Flexbox\n\n### 1. Navigation Bars\n\nFlexbox is perfect for horizontal navigation menus.\n\n```css\n.navbar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n}\n\n.nav-links {\n  display: flex;\n  gap: 2rem;\n  list-style: none;\n}\n```\n\n### 2. Card Components\n\nFor flexible card layouts that adapt to content.\n\n```css\n.card {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n.card-content {\n  flex: 1; /* Takes up remaining space */\n}\n\n.card-actions {\n  margin-top: auto; /* Pushes to bottom */\n}\n```\n\n### 3. Centering Content\n\nThe easiest way to center content both horizontally and vertically.\n\n```css\n.center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n}\n```\n\n### 4. Form Layouts\n\nFlexbox works great for form controls and button groups.\n\n```css\n.form-group {\n  display: flex;\n  gap: 1rem;\n  align-items: center;\n}\n\n.form-group label {\n  flex-shrink: 0;\n  width: 120px;\n}\n\n.form-group input {\n  flex: 1;\n}\n```\n\n## When to Use CSS Grid\n\n### 1. Page Layouts\n\nGrid excels at creating overall page structures.\n\n```css\n.page-layout {\n  display: grid;\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar main aside\"\n    \"footer footer footer\";\n  grid-template-columns: 200px 1fr 200px;\n  grid-template-rows: auto 1fr auto;\n  min-height: 100vh;\n}\n\n.header { grid-area: header; }\n.sidebar { grid-area: sidebar; }\n.main { grid-area: main; }\n.aside { grid-area: aside; }\n.footer { grid-area: footer; }\n```\n\n### 2. Image Galleries\n\nPerfect for creating responsive image grids.\n\n```css\n.gallery {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n}\n\n.gallery img {\n  width: 100%;\n  height: 200px;\n  object-fit: cover;\n}\n```\n\n### 3. Dashboard Layouts\n\nComplex dashboard interfaces with multiple sections.\n\n```css\n.dashboard {\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  gap: 1rem;\n}\n\n.widget-large {\n  grid-column: span 8;\n}\n\n.widget-small {\n  grid-column: span 4;\n}\n```\n\n### 4. Magazine-Style Layouts\n\nFor complex, magazine-like layouts with overlapping content.\n\n```css\n.magazine-layout {\n  display: grid;\n  grid-template-columns: repeat(6, 1fr);\n  grid-template-rows: repeat(4, 200px);\n  gap: 1rem;\n}\n\n.featured-article {\n  grid-column: 1 / 4;\n  grid-row: 1 / 3;\n}\n\n.sidebar-article {\n  grid-column: 4 / 7;\n  grid-row: 1 / 2;\n}\n```\n\n## Combining Flexbox and Grid\n\nThe real power comes from using both together!\n\n```css\n/* Grid for overall layout */\n.page {\n  display: grid;\n  grid-template-areas:\n    \"header\"\n    \"main\"\n    \"footer\";\n}\n\n/* Flexbox for header content */\n.header {\n  grid-area: header;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n/* Grid for main content area */\n.main {\n  grid-area: main;\n  display: grid;\n  grid-template-columns: 1fr 300px;\n  gap: 2rem;\n}\n\n/* Flexbox for article cards */\n.article-card {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n```\n\n## Decision Framework\n\nUse this simple framework to decide:\n\n**Choose Flexbox when:**\n- You need one-dimensional layouts\n- Content size should determine layout\n- You're aligning items within a container\n- Building components (buttons, cards, navigation)\n\n**Choose Grid when:**\n- You need two-dimensional layouts\n- Layout should determine content size\n- You have a complex layout structure\n- Building page-level layouts\n\n## Browser Support\n\nBoth Flexbox and Grid have excellent browser support:\n- **Flexbox**: 98%+ global support\n- **CSS Grid**: 96%+ global support\n\n## Conclusion\n\nFlexbox and CSS Grid aren't competing technologies - they're complementary tools that solve different problems. Flexbox excels at component-level layouts and one-dimensional arrangements, while Grid shines for page-level layouts and complex two-dimensional structures.\n\nMaster both, understand their strengths, and you'll be able to create any layout with confidence and efficiency.",
    "featuredImageUrl": "https://images.pexels.com/photos/196644/pexels-photo-196644.jpeg",
    "metaDescription": "Learn when to use CSS Grid vs Flexbox with practical examples. Master both layout methods to create responsive, modern web designs efficiently.",
    "seoTitle": "CSS Grid vs Flexbox: Complete Layout Guide | When to Use Each",
    "keywords": ["CSS Grid", "Flexbox", "CSS layout", "responsive design", "web development"],
    "author": "Mike Rodriguez",
    "categories": ["CSS", "Web Development"],
    "tags": ["css", "grid", "flexbox", "layout", "responsive"],
    "status": "published",
    "publishDate": "2025-01-03T11:00:00Z",
    "createdAt": "2025-01-03T10:30:00Z",
    "updatedAt": "2025-01-03T11:15:00Z"
  },
  {
    "id": "content-1735670400000-jkl012mno",
    "title": "Building Your First REST API with Node.js and Express",
    "slug": "first-rest-api-nodejs-express-tutorial",
    "content": "# Building Your First REST API with Node.js and Express\n\nCreating a REST API is one of the most fundamental skills for backend developers. In this comprehensive tutorial, we'll build a complete REST API from scratch using Node.js and Express.\n\n## What You'll Build\n\nWe'll create a simple **Task Management API** with the following features:\n- Create, read, update, and delete tasks\n- User authentication\n- Input validation\n- Error handling\n- Database integration\n\n## Prerequisites\n\nBefore we start, make sure you have:\n- Node.js installed (v14 or higher)\n- Basic JavaScript knowledge\n- Understanding of HTTP methods\n- A code editor (VS Code recommended)\n\n## Project Setup\n\nFirst, let's create our project structure:\n\n```bash\nmkdir task-api\ncd task-api\nnpm init -y\n```\n\nInstall the required dependencies:\n\n```bash\nnpm install express mongoose bcryptjs jsonwebtoken dotenv cors helmet\nnpm install -D nodemon\n```\n\nUpdate your `package.json` scripts:\n\n```json\n{\n  \"scripts\": {\n    \"start\": \"node server.js\",\n    \"dev\": \"nodemon server.js\"\n  }\n}\n```\n\n## Basic Express Server\n\nCreate `server.js`:\n\n```javascript\nconst express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nrequire('dotenv').config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Middleware\napp.use(helmet());\napp.use(cors());\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Routes\napp.get('/', (req, res) => {\n  res.json({ message: 'Welcome to Task API' });\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({ error: 'Something went wrong!' });\n});\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({ error: 'Route not found' });\n});\n\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n```\n\n## Database Setup with MongoDB\n\nCreate `config/database.js`:\n\n```javascript\nconst mongoose = require('mongoose');\n\nconst connectDB = async () => {\n  try {\n    const conn = await mongoose.connect(process.env.MONGODB_URI, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\n  } catch (error) {\n    console.error('Database connection error:', error);\n    process.exit(1);\n  }\n};\n\nmodule.exports = connectDB;\n```\n\n## Data Models\n\nCreate `models/User.js`:\n\n```javascript\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\n\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n    minlength: 3,\n    maxlength: 30\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true,\n    match: [/^\\S+@\\S+\\.\\S+$/, 'Please enter a valid email']\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 6\n  }\n}, {\n  timestamps: true\n});\n\n// Hash password before saving\nuserSchema.pre('save', async function(next) {\n  if (!this.isModified('password')) return next();\n  this.password = await bcrypt.hash(this.password, 12);\n  next();\n});\n\n// Compare password method\nuserSchema.methods.comparePassword = async function(candidatePassword) {\n  return bcrypt.compare(candidatePassword, this.password);\n};\n\nmodule.exports = mongoose.model('User', userSchema);\n```\n\nCreate `models/Task.js`:\n\n```javascript\nconst mongoose = require('mongoose');\n\nconst taskSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 100\n  },\n  description: {\n    type: String,\n    trim: true,\n    maxlength: 500\n  },\n  completed: {\n    type: Boolean,\n    default: false\n  },\n  priority: {\n    type: String,\n    enum: ['low', 'medium', 'high'],\n    default: 'medium'\n  },\n  dueDate: {\n    type: Date\n  },\n  user: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  }\n}, {\n  timestamps: true\n});\n\nmodule.exports = mongoose.model('Task', taskSchema);\n```\n\n## Authentication Middleware\n\nCreate `middleware/auth.js`:\n\n```javascript\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/User');\n\nconst auth = async (req, res, next) => {\n  try {\n    const token = req.header('Authorization')?.replace('Bearer ', '');\n    \n    if (!token) {\n      return res.status(401).json({ error: 'Access denied. No token provided.' });\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findById(decoded.id).select('-password');\n    \n    if (!user) {\n      return res.status(401).json({ error: 'Invalid token.' });\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    res.status(401).json({ error: 'Invalid token.' });\n  }\n};\n\nmodule.exports = auth;\n```\n\n## API Routes\n\nCreate `routes/auth.js`:\n\n```javascript\nconst express = require('express');\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/User');\nconst auth = require('../middleware/auth');\n\nconst router = express.Router();\n\n// Register\nrouter.post('/register', async (req, res) => {\n  try {\n    const { username, email, password } = req.body;\n\n    // Check if user exists\n    const existingUser = await User.findOne({ \n      $or: [{ email }, { username }] \n    });\n    \n    if (existingUser) {\n      return res.status(400).json({ \n        error: 'User with this email or username already exists' \n      });\n    }\n\n    // Create user\n    const user = new User({ username, email, password });\n    await user.save();\n\n    // Generate token\n    const token = jwt.sign(\n      { id: user._id }, \n      process.env.JWT_SECRET, \n      { expiresIn: '7d' }\n    );\n\n    res.status(201).json({\n      message: 'User created successfully',\n      token,\n      user: {\n        id: user._id,\n        username: user.username,\n        email: user.email\n      }\n    });\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Login\nrouter.post('/login', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    // Find user\n    const user = await User.findOne({ email });\n    if (!user) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n\n    // Check password\n    const isMatch = await user.comparePassword(password);\n    if (!isMatch) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n\n    // Generate token\n    const token = jwt.sign(\n      { id: user._id }, \n      process.env.JWT_SECRET, \n      { expiresIn: '7d' }\n    );\n\n    res.json({\n      message: 'Login successful',\n      token,\n      user: {\n        id: user._id,\n        username: user.username,\n        email: user.email\n      }\n    });\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Get current user\nrouter.get('/me', auth, (req, res) => {\n  res.json({ user: req.user });\n});\n\nmodule.exports = router;\n```\n\nCreate `routes/tasks.js`:\n\n```javascript\nconst express = require('express');\nconst Task = require('../models/Task');\nconst auth = require('../middleware/auth');\n\nconst router = express.Router();\n\n// Get all tasks for user\nrouter.get('/', auth, async (req, res) => {\n  try {\n    const { page = 1, limit = 10, completed, priority } = req.query;\n    const filter = { user: req.user._id };\n    \n    if (completed !== undefined) {\n      filter.completed = completed === 'true';\n    }\n    \n    if (priority) {\n      filter.priority = priority;\n    }\n\n    const tasks = await Task.find(filter)\n      .sort({ createdAt: -1 })\n      .limit(limit * 1)\n      .skip((page - 1) * limit);\n\n    const total = await Task.countDocuments(filter);\n\n    res.json({\n      tasks,\n      totalPages: Math.ceil(total / limit),\n      currentPage: page,\n      total\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Get single task\nrouter.get('/:id', auth, async (req, res) => {\n  try {\n    const task = await Task.findOne({ \n      _id: req.params.id, \n      user: req.user._id \n    });\n    \n    if (!task) {\n      return res.status(404).json({ error: 'Task not found' });\n    }\n    \n    res.json({ task });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Create task\nrouter.post('/', auth, async (req, res) => {\n  try {\n    const task = new Task({\n      ...req.body,\n      user: req.user._id\n    });\n    \n    await task.save();\n    res.status(201).json({ task });\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Update task\nrouter.put('/:id', auth, async (req, res) => {\n  try {\n    const task = await Task.findOneAndUpdate(\n      { _id: req.params.id, user: req.user._id },\n      req.body,\n      { new: true, runValidators: true }\n    );\n    \n    if (!task) {\n      return res.status(404).json({ error: 'Task not found' });\n    }\n    \n    res.json({ task });\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Delete task\nrouter.delete('/:id', auth, async (req, res) => {\n  try {\n    const task = await Task.findOneAndDelete({ \n      _id: req.params.id, \n      user: req.user._id \n    });\n    \n    if (!task) {\n      return res.status(404).json({ error: 'Task not found' });\n    }\n    \n    res.json({ message: 'Task deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\nmodule.exports = router;\n```\n\n## Environment Variables\n\nCreate `.env`:\n\n```env\nPORT=3000\nMONGODB_URI=mongodb://localhost:27017/taskapi\nJWT_SECRET=your-super-secret-jwt-key-here\nNODE_ENV=development\n```\n\n## Final Server Setup\n\nUpdate `server.js` to include routes and database:\n\n```javascript\nconst express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst connectDB = require('./config/database');\nrequire('dotenv').config();\n\n// Import routes\nconst authRoutes = require('./routes/auth');\nconst taskRoutes = require('./routes/tasks');\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Connect to database\nconnectDB();\n\n// Middleware\napp.use(helmet());\napp.use(cors());\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Routes\napp.get('/', (req, res) => {\n  res.json({ \n    message: 'Welcome to Task API',\n    version: '1.0.0',\n    endpoints: {\n      auth: '/api/auth',\n      tasks: '/api/tasks'\n    }\n  });\n});\n\napp.use('/api/auth', authRoutes);\napp.use('/api/tasks', taskRoutes);\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({ error: 'Something went wrong!' });\n});\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({ error: 'Route not found' });\n});\n\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n```\n\n## Testing Your API\n\nStart your server:\n\n```bash\nnpm run dev\n```\n\nTest with curl or Postman:\n\n```bash\n# Register a user\ncurl -X POST http://localhost:3000/api/auth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"john\",\"email\":\"john@example.com\",\"password\":\"password123\"}'\n\n# Login\ncurl -X POST http://localhost:3000/api/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"john@example.com\",\"password\":\"password123\"}'\n\n# Create a task (use token from login)\ncurl -X POST http://localhost:3000/api/tasks \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN_HERE\" \\\n  -d '{\"title\":\"Learn Node.js\",\"description\":\"Complete the REST API tutorial\"}'\n```\n\n## Next Steps\n\nCongratulations! You've built a complete REST API. Here are some enhancements to consider:\n\n1. **Input Validation**: Add express-validator for robust input validation\n2. **Rate Limiting**: Implement rate limiting to prevent abuse\n3. **Logging**: Add proper logging with Winston\n4. **Testing**: Write unit and integration tests\n5. **Documentation**: Create API documentation with Swagger\n6. **Deployment**: Deploy to platforms like Heroku or AWS\n\n## Conclusion\n\nYou now have a solid foundation for building REST APIs with Node.js and Express. This API includes authentication, CRUD operations, error handling, and follows REST conventions. Use this as a starting point for your own projects!",
    "featuredImageUrl": "https://images.pexels.com/photos/1181671/pexels-photo-1181671.jpeg",
    "metaDescription": "Learn to build a complete REST API with Node.js and Express. Includes authentication, CRUD operations, MongoDB integration, and best practices.",
    "seoTitle": "Build Your First REST API with Node.js & Express | Complete Tutorial",
    "keywords": ["Node.js", "Express", "REST API", "MongoDB", "JavaScript", "backend"],
    "author": "David Kim",
    "categories": ["Backend Development", "Node.js"],
    "tags": ["nodejs", "express", "api", "backend", "mongodb", "tutorial"],
    "status": "published",
    "publishDate": "2025-01-04T09:00:00Z",
    "createdAt": "2025-01-04T08:30:00Z",
    "updatedAt": "2025-01-04T09:15:00Z"
  },
  {
    "id": "content-1735674000000-mno345pqr",
    "title": "Mastering Git: Advanced Commands Every Developer Should Know",
    "slug": "mastering-git-advanced-commands-developers",
    "content": "# Mastering Git: Advanced Commands Every Developer Should Know\n\nWhile most developers know the basics of Git (add, commit, push, pull), there's a whole world of powerful commands that can dramatically improve your workflow. Let's explore the advanced Git techniques that separate good developers from great ones.\n\n## Interactive Rebase: Rewriting History\n\nInteractive rebase is one of Git's most powerful features for cleaning up your commit history.\n\n```bash\n# Start interactive rebase for last 3 commits\ngit rebase -i HEAD~3\n\n# Rebase onto main branch\ngit rebase -i main\n```\n\nIn the interactive editor, you can:\n- **pick**: Keep the commit as-is\n- **reword**: Change the commit message\n- **edit**: Modify the commit content\n- **squash**: Combine with previous commit\n- **drop**: Remove the commit entirely\n\n### Example: Squashing Commits\n\n```bash\n# Before rebase\npick abc1234 Add user authentication\npick def5678 Fix typo in auth\npick ghi9012 Update auth tests\n\n# After editing\npick abc1234 Add user authentication\nsquash def5678 Fix typo in auth\nsquash ghi9012 Update auth tests\n```\n\n## Cherry-Picking: Selective Commit Application\n\nApply specific commits from one branch to another.\n\n```bash\n# Cherry-pick a single commit\ngit cherry-pick abc1234\n\n# Cherry-pick multiple commits\ngit cherry-pick abc1234 def5678\n\n# Cherry-pick a range of commits\ngit cherry-pick abc1234..def5678\n\n# Cherry-pick without committing (for review)\ngit cherry-pick --no-commit abc1234\n```\n\n## Advanced Stashing\n\nGo beyond basic `git stash` with these powerful options:\n\n```bash\n# Stash with a descriptive message\ngit stash push -m \"Work in progress on user profile\"\n\n# Stash only specific files\ngit stash push -m \"Partial work\" file1.js file2.js\n\n# Stash untracked files too\ngit stash -u\n\n# Create a branch from a stash\ngit stash branch feature-branch stash@{0}\n\n# Apply stash to multiple branches\ngit stash show -p stash@{0} | git apply\n```\n\n### Stash Management\n\n```bash\n# List all stashes with details\ngit stash list --stat\n\n# Show specific stash content\ngit stash show -p stash@{1}\n\n# Drop specific stash\ngit stash drop stash@{1}\n\n# Clear all stashes\ngit stash clear\n```\n\n## Bisect: Binary Search for Bugs\n\nFind the exact commit that introduced a bug using binary search.\n\n```bash\n# Start bisect session\ngit bisect start\n\n# Mark current commit as bad\ngit bisect bad\n\n# Mark a known good commit\ngit bisect good v1.0.0\n\n# Git will checkout a commit in the middle\n# Test and mark as good or bad\ngit bisect good  # or git bisect bad\n\n# Continue until Git finds the problematic commit\n# Reset when done\ngit bisect reset\n```\n\n### Automated Bisect\n\n```bash\n# Use a script to automatically test\ngit bisect start HEAD v1.0.0\ngit bisect run npm test\n```\n\n## Worktrees: Multiple Working Directories\n\nWork on multiple branches simultaneously without switching.\n\n```bash\n# Create a new worktree\ngit worktree add ../feature-branch feature-branch\n\n# Create worktree with new branch\ngit worktree add ../hotfix -b hotfix/urgent-fix\n\n# List all worktrees\ngit worktree list\n\n# Remove worktree\ngit worktree remove ../feature-branch\n\n# Prune deleted worktrees\ngit worktree prune\n```\n\n## Advanced Logging and History\n\n### Custom Log Formats\n\n```bash\n# Beautiful one-line log\ngit log --oneline --graph --decorate --all\n\n# Custom format with author and date\ngit log --pretty=format:\"%h %an %ad %s\" --date=short\n\n# Show file changes\ngit log --stat\n\n# Show actual changes\ngit log -p\n\n# Filter by author\ngit log --author=\"John Doe\"\n\n# Filter by date range\ngit log --since=\"2 weeks ago\" --until=\"1 week ago\"\n\n# Filter by commit message\ngit log --grep=\"fix\"\n```\n\n### Advanced History Search\n\n```bash\n# Find when a line was added/removed\ngit log -S \"function_name\" --source --all\n\n# Find commits that changed a specific file\ngit log --follow -- path/to/file.js\n\n# Show commits that touched specific lines\ngit log -L 10,20:path/to/file.js\n\n# Find merge commits\ngit log --merges\n\n# Find commits not in another branch\ngit log main..feature-branch\n```\n\n## Reflog: Your Safety Net\n\nReflog tracks all changes to branch tips, even after rebase or reset.\n\n```bash\n# Show reflog for current branch\ngit reflog\n\n# Show reflog for specific branch\ngit reflog feature-branch\n\n# Recover \"lost\" commits\ngit checkout abc1234  # from reflog\ngit branch recovered-branch\n\n# Reset to previous state\ngit reset --hard HEAD@{2}\n```\n\n## Advanced Merging and Conflict Resolution\n\n### Merge Strategies\n\n```bash\n# Merge with strategy\ngit merge -X theirs feature-branch\ngit merge -X ours feature-branch\n\n# Squash merge (no merge commit)\ngit merge --squash feature-branch\n\n# No fast-forward (always create merge commit)\ngit merge --no-ff feature-branch\n```\n\n### Conflict Resolution Tools\n\n```bash\n# Use merge tool\ngit mergetool\n\n# Show conflict in different styles\ngit config merge.conflictstyle diff3\n\n# Abort merge\ngit merge --abort\n\n# Continue after resolving conflicts\ngit merge --continue\n```\n\n## Hooks: Automating Your Workflow\n\nGit hooks run scripts at specific points in the Git workflow.\n\n### Pre-commit Hook Example\n\n```bash\n#!/bin/sh\n# .git/hooks/pre-commit\n\n# Run linter\nnpm run lint\nif [ $? -ne 0 ]; then\n  echo \"Linting failed. Commit aborted.\"\n  exit 1\nfi\n\n# Run tests\nnpm test\nif [ $? -ne 0 ]; then\n  echo \"Tests failed. Commit aborted.\"\n  exit 1\nfi\n```\n\n### Commit Message Hook\n\n```bash\n#!/bin/sh\n# .git/hooks/commit-msg\n\n# Check commit message format\nif ! grep -qE \"^(feat|fix|docs|style|refactor|test|chore): .+\" \"$1\"; then\n  echo \"Invalid commit message format!\"\n  echo \"Use: type: description\"\n  echo \"Types: feat, fix, docs, style, refactor, test, chore\"\n  exit 1\nfi\n```\n\n## Aliases: Speed Up Your Workflow\n\nCreate shortcuts for complex commands:\n\n```bash\n# Set up useful aliases\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.st status\n\n# Advanced aliases\ngit config --global alias.unstage 'reset HEAD --'\ngit config --global alias.last 'log -1 HEAD'\ngit config --global alias.visual '!gitk'\n\n# Complex aliases\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n\ngit config --global alias.find-merge \"!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'\"\n```\n\n## Submodules: Managing Dependencies\n\nWork with external repositories as submodules:\n\n```bash\n# Add submodule\ngit submodule add https://github.com/user/repo.git path/to/submodule\n\n# Initialize submodules after cloning\ngit submodule init\ngit submodule update\n\n# Or in one command\ngit submodule update --init --recursive\n\n# Update submodules to latest\ngit submodule update --remote\n\n# Remove submodule\ngit submodule deinit path/to/submodule\ngit rm path/to/submodule\n```\n\n## Advanced Configuration\n\n### Global Configuration\n\n```bash\n# Better diff algorithm\ngit config --global diff.algorithm patience\n\n# Auto-correct typos\ngit config --global help.autocorrect 1\n\n# Default branch name\ngit config --global init.defaultBranch main\n\n# Reuse recorded resolution\ngit config --global rerere.enabled true\n\n# Push current branch by default\ngit config --global push.default current\n```\n\n### Conditional Configuration\n\n```bash\n# Different configs for work and personal\n# In ~/.gitconfig\n[includeIf \"gitdir:~/work/\"]\n    path = ~/.gitconfig-work\n[includeIf \"gitdir:~/personal/\"]\n    path = ~/.gitconfig-personal\n```\n\n## Performance Tips\n\n```bash\n# Speed up status on large repos\ngit config core.preloadindex true\ngit config core.fscache true\ngit config gc.auto 256\n\n# Partial clone for large repositories\ngit clone --filter=blob:none <url>\n\n# Shallow clone for CI/CD\ngit clone --depth 1 <url>\n```\n\n## Troubleshooting Commands\n\n```bash\n# Check repository integrity\ngit fsck\n\n# Cleanup unnecessary files\ngit gc --aggressive\n\n# Find large files in history\ngit rev-list --objects --all | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | sed -n 's/^blob //p' | sort --numeric-sort --key=2 | tail -10\n\n# Remove file from entire history\ngit filter-branch --force --index-filter 'git rm --cached --ignore-unmatch path/to/file' --prune-empty --tag-name-filter cat -- --all\n```\n\n## Best Practices\n\n1. **Use descriptive commit messages** following conventional commits\n2. **Rebase feature branches** before merging to maintain clean history\n3. **Use .gitignore** effectively to avoid committing unnecessary files\n4. **Regular maintenance** with `git gc` and `git prune`\n5. **Backup important branches** before destructive operations\n6. **Use signed commits** for security in important projects\n\n## Conclusion\n\nMastering these advanced Git commands will make you a more efficient developer. Start incorporating them into your daily workflow gradually, and you'll soon wonder how you ever managed without them.\n\nRemember: Git is incredibly powerful, but with great power comes great responsibility. Always backup important work before trying destructive operations, and don't hesitate to use `git reflog` when things go wrong!",
    "featuredImageUrl": "https://images.pexels.com/photos/4164418/pexels-photo-4164418.jpeg",
    "metaDescription": "Master advanced Git commands including interactive rebase, cherry-pick, bisect, worktrees, and more. Elevate your development workflow with these powerful techniques.",
    "seoTitle": "Advanced Git Commands Every Developer Should Master | Complete Guide",
    "keywords": ["Git", "version control", "rebase", "cherry-pick", "bisect", "development workflow"],
    "author": "Emily Zhang",
    "categories": ["Git", "Development Tools"],
    "tags": ["git", "version-control", "development", "workflow", "commands"],
    "status": "published",
    "publishDate": "2025-01-05T13:00:00Z",
    "createdAt": "2025-01-05T12:30:00Z",
    "updatedAt": "2025-01-05T13:15:00Z"
  }
]
